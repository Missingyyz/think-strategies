name: Docker Build and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true # 将镜像加载到本地 Docker

      - name: Save Docker image as local tar.gz
        id: save_local
        run: |
          # 提取第一个 tag 作为镜像名称
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "Saving image: $IMAGE_TAG"
          
          # 创建安全的文件名
          SAFE_NAME=$(echo "$IMAGE_TAG" | sed 's/[^a-zA-Z0-9._-]/_/g')
          
          # 创建一个目录来存放 artifact 文件（最佳实践）
          mkdir -p ./artifact-staging
          
          # 保存镜像为 tar 文件到 staging 目录
          docker save "$IMAGE_TAG" | gzip > "./artifact-staging/${SAFE_NAME}.tar.gz"
          
          # 设置输出变量，供 upload-artifact 使用
          echo "artifact-path=./artifact-staging/${SAFE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact-name=docker-image-${SAFE_NAME}" >> $GITHUB_OUTPUT # 确保这个名称与下载时的 pattern 匹配
        # 注意：这里id改成了save_local，避免和原先的save混淆，虽然原先的id:save也没被其他地方引用

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.save_local.outputs.artifact-name }} # 使用上一步定义的 artifact 名称
          path: ${{ steps.save_local.outputs.artifact-path }} # 使用上一步定义的 artifact 文件路径
          retention-days: 5 # 可选：设置 artifact 的保留天数，默认为 90 天

      - name: Download all Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-* # 这个 pattern 现在应该能匹配到刚刚上传的 artifact 名称了
          path: ./docker-images
